<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!--
    配置引入外部 properties 配置文件
        1. resource: 引入类路径下的资源文件
        2. url: 引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="db.properties"></properties>

    <!--
    配置 MyBatis 设置项
        1. setting 用来配置每一个设置项
        2. name 设置项名
        3. value 设置项取值
    -->
    <settings>
        <!-- 配置数据库字段下划线转驼峰 last_name => lastName -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- 配置 MyBatis 对 null 在不同数据库厂商中的处理，默认是 OTHER -->
        <setting name="jdbcTypeForNull" value="NULL"/>

        <!-- 显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题 -->
        <setting name="cacheEnabled" value="true"/>
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    </settings>

    <!--
    配置类型别名
        1. 可以为我们的java类型起别名，别名不区分大小写
        2. typeAlias 为某个java类型起别名
            1. type 指定要起别名的类型全类名
            2. alias 指定别名，默认别名就是类名小写
        3. package 为某个包下的所有类批量起别名，批量起别名的情况下，使用 @Alias 注解为某个类型指定新的别名
            1. name 指定包名，为当前包及下面所有的后代包的每一个类都起一个默认别名（类名小写）
    -->
    <!--
    <typeAliases>
        <typeAlias type="com.onevgo.mybatis.bean.Employee" alias="employee"></typeAlias>
        <package name="com.onevgo.mybatis.bean"></package>
    </typeAliases>
    -->

    <!-- 配置类型处理器 -->
    <typeHandlers>
        <!--
        <typeHandler handler="org.apache.ibatis.type.InstantTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.LocalDateTimeTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.LocalDateTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.LocalTimeTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.OffsetDateTimeTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.OffsetTimeTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.ZonedDateTimeTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.YearTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.MonthTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.YearMonthTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.JapaneseDateTypeHandler"></typeHandler>
        <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="com.onevgo.mybatis.bean.EmpStatus"></typeHandler>
        -->
        <!-- 配置自定义类型处理器 -->
        <typeHandler handler="com.onevgo.mybatis.typehandler.MyEnumEmpStatusTypeHandler"
                     javaType="com.onevgo.mybatis.bean.EmpStatus"></typeHandler>
    </typeHandlers>

    <!-- 配置插件 -->
    <plugins>
        <!--
        <plugin interceptor="com.onevgo.mybatis.plugin.MyFirstPlugin">
            <property name="username" value="root"></property>
            <property name="password" value="root"></property>
        </plugin>
        <plugin interceptor="com.onevgo.mybatis.plugin.MySecondPlugin"></plugin>
        -->
        <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
    </plugins>

    <!--
    配置多环境支持
        1. default 指定使用某种环境，可以达到快速切换环境
        2. environment 配置一个具体的环境信息，id 代表当前环境的唯一标识
            1. transactionManager 事务管理器
                1. type 事务管理器的类型
                    1. JDBC(org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory)
                    2. MANAGER(org.apache.ibatis.transaction.managed.ManagedTransactionFactory)
                    3. 自定义事务管理器：实现 org.apache.ibatis.transaction.TransactionFactory 接口，type 指定为全类名
            2. dataSource 数据源
                1. type 数据源类型
                    1. UNPOOLED(org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory)
                    2. POOLED(org.apache.ibatis.datasource.pooled.PooledDataSourceFactory)
                    3. JNDI(org.apache.ibatis.datasource.jndi.JndiDataSourceFactory)
                    4. 自定义数据源: 实现 org.apache.ibatis.datasource.DataSourceFactory 接口，type 是全类名
    -->
    <environments default="development">
        <environment id="test">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driverClass}"/>
                <property name="url" value="${jdbc.jdbcUrl}"/>
                <property name="username" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driverClass}"/>
                <property name="url" value="${jdbc.jdbcUrl}"/>
                <property name="username" value="${jdbc.user}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
    配置多数据库厂商支持
        1. type="DB_VENDOR" org.apache.ibatis.mapping.VendorDatabaseIdProvider
        2. 作用就是得到数据库厂商的标识（驱动 getDatabaseProductName()），mybatis 就是根据数据库厂商标识来执行不同的sql
        3. MySQL, Oracle, SQL Server,xxx
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"></property>
        <property name="Oracle" value="oracle"></property>
        <property name="SQL Server" value="sqlserver"></property>
    </databaseIdProvider>

    <!--
    配置 sql 映射文件
        1. mappers 将sql映射注册到全局配置中
            1. mapper 注册一个sql映射
                1. resource 引用类路径下的 sql 映射文件
                2. url 引用网络路径或者磁盘路径下的 sql 映射文件 file:///var/mappers/AuthorMapper.xml
            2. 注册接口
                1. class 引用（注册）接口
                    1. 有 sql 映射文件，映射文件名必须和接口同名，并且放在与接口统一目录下
                        1. XxxMapper.class
                        2. XxxMapper.xml
                    2. 没有 sql 映射文件，所有的 sql 都是利用注解写在接口上
                2. 推荐：
                    1. 比较重要的，复杂的 DAO 接口我们来写sql映射文件
                    2. 不重要，简单的 DAO 接口为了开发快速可以使用注解
    -->
    <mappers>
        <!--
        <mapper resource="com/onevgo/mybatis/mapper/EmployeeMapper.xml"/>
        <mapper class="com.onevgo.mybatis.dao.EmployeeMapper"></mapper>
        <mapper class="com.onevgo.mybatis.dao.EmployeeMapperAnnotation"></mapper>
        -->

        <!-- 批量注册 -->
        <package name="com.onevgo.mybatis.dao"></package>
        <package name="com.onevgo.mybatis.mbg.dao"></package>
    </mappers>
</configuration>