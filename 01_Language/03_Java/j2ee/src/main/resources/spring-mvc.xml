<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--
    需要进行 Spring 整合 SpringMVC 吗？
    还是否需要在加入 Spring 的 IOC 容器？
    是否需要在 web.xml 文件中配置启动 Spring IOC 容器的 ContextLoaderListener ?
        1. 需要：通常情况下，类似于数据源，事务，整合其他框架都是放在 Spring 的配置文件中（而不是放在 SpringMVC 的配置文件中）
            实际上放入 Spring 配置文件对应的 IOC 容器中的还有 Service 和 DAO。
        2. 不需要：都放在 SpringMVC 的配置文件中。也可以分多个 Spring 的配置文件，然后使用 import 节点导入其他的配置文件，然后使用 import 节点导入其他的配置文件
    -->

    <!--
    问题：若 Spring 的 IOC 容器和 SpringMVC 的 IOC 容器扫描的包有重合的部分，就会导致有的 bean 会被创建 2次
    解决：
        1. 使 Spring 的 IOC 容器扫描的包和 SpringMVC 的 IOC 容器扫描的包没有重合的部分。
        2. 使用 exclude-filter 和 include-filter 子节点来规定只能扫描的注释
    -->

    <!--
    SpringMVC 的 IOC 容器中的 bean 可以来引用 Spring IOC 容器中的 bean。
    反过来呢？反之则不行，Spring IOC 容器中的 bean 却不能来引用 SpringMVC IOC 容器中的 bean
    -->

    <!-- 配置自动扫描 -->
    <context:component-scan base-package="com.onevgo.springmvc" use-default-filters="false">
        <!-- context:include-filter 子节点指定包含哪些指定表达式的组件，该子节点需要 use-default-filters 配合使用-->
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 配置视图解析器 InternalResourceViewResolver：如何把 handler 方法返回值解析为实际的物理视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- 配置视图解析器 BeanNameViewResolver：使用视图的名字来解析视图 -->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <!-- 通过 order 属性来定义视图解析器的优先级，order 值越小优先级越高 -->
        <property name="order" value="0"></property>
    </bean>

    <!-- 配置国际化资源文件 -->
    <!--
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"></property>
    </bean>
    -->

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="/WEB-INF/i18n"></property>
    </bean>

    <!-- 配置 SessionLocalResolver -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>

    <!-- 配置 MultipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
        <property name="maxUploadSize" value="1024000"></property>
    </bean>

    <!-- 配置转换器 ConversionServiceFactoryBean -->
    <!--
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="employeeConverter"></ref>
            </set>
        </property>
    </bean>
    -->

    <!-- 配置格式化处理器 FormattingConversionServiceFactoryBean：web开发下优先选择 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="employeeConverter"></ref>
            </set>
        </property>
    </bean>

    <!-- 配置使用 SimpleMappingExceptionResolver 来映射异常 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="exception"></property>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
    </bean>

    <!-- 配置 SpringMVC 注解驱动：注册 RequestMappingHandlerAdapter -->
    <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>

    <mvc:interceptors>
        <!-- 配置自定义的拦截器 -->
        <bean class="com.onevgo.springmvc.interceptors.FirstInterceptor"></bean>

        <!-- 配置拦截器(不)作用的路径 -->
        <mvc:interceptor>
            <mvc:mapping path="/emps"/>
            <bean class="com.onevgo.springmvc.interceptors.SecondInterceptor"></bean>
        </mvc:interceptor>

        <!-- 配置 LocaleChangeInterceptor -->
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
    </mvc:interceptors>

    <!-- 配置参数化视图控制器 ParameterizableViewController：将匹配 path 路径的请求直接转发到指定的 view-name 页面 -->
    <mvc:view-controller path="/success" view-name="success"/>
    <!--<mvc:view-controller path="/i18n" view-name="i18n"></mvc:view-controller>-->
    <mvc:view-controller path="/i18n2" view-name="i18n2"/>

    <!--
    配置默认的 servlet 处理器：
        default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler，
        它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，就将该请求交由 WEB 应用服务器默认的
        Servlet 处理，如果不是静态资源的请求，才由 DispatcherServlet 继续处理
        一般 WEB 应用服务器默认的 Servlet 的名称都是 default。
        若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
    -->
    <mvc:default-servlet-handler/>
</beans>